$(document).ready(function(){var t=$("select option:selected").attr("value");$(".center").find("#sources").attr("placeholder",t);var e="https://apiv2.bitcoinaverage.com/indices/global/ticker/BTC"+t,i="https://apiv2.bitcoinaverage.com/indices/global/ticker/ETH"+t,n="https://apiv2.bitcoinaverage.com/indices/global/ticker/LTC"+t;$.get(i,function(t){var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--eth .value-box-percent--hour").css("color","red"),$(".card-container__item--eth .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--eth .value-box-percent--day").css("color","red"),$(".card-container__item--eth .value-box-many--day").css("color","red")):t.changes.price.week<0?($(".card-container__item--eth .value-box-percent--week").css("color","red"),$(".card-container__item--eth .value-box-many--week").css("color","red")):t.changes.price.month<0?($(".card-container__item--eth .value-box-percent--month").css("color","red"),$(".card-container__item--eth .value-box-many--month").css("color","red")):($(".card-container__item--eth .value-box-percent").css("color","green"),$(".card-container__item--eth .value-box-many").css("color","green")),$(".card-container__item--eth .value-box-percent--hour").text(e+"$"),$(".card-container__item--eth .value-box-percent--day").text(i+"$"),$(".card-container__item--eth .value-box-percent--week").text(n+"$"),$(".card-container__item--eth .value-box-percent--month").text(s+"$"),$(".card-container__item--eth .value-box-many--hour").text(r+"%"),$(".card-container__item--eth .value-box-many--day").text(o+"%"),$(".card-container__item--eth .value-box-many--week").text(a+"%"),$(".card-container__item--eth .value-box-many--month").text(c+"%")}),$.get(n,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--lth .value-box-percent--hour").css("color","red"),$(".card-container__item--lth .value-box-many--hour").css("color","red")),t.changes.price.day<0&&($(".card-container__item--lth .value-box-percent--day").css("color","red"),$(".card-container__item--lth .value-box-many--day").css("color","red")),t.changes.price.week<0&&($(".card-container__item--lth .value-box-percent--week").css("color","red"),$(".card-container__item--lth .value-box-many--week").css("color","red")),t.changes.price.month<0?($(".card-container__item--lth .value-box-percent--month").css("color","red"),$(".card-container__item--lth .value-box-many--month").css("color","red")):($(".card-container__item--lth .value-box-percent").css("color","green"),$(".card-container__item--lth .value-box-many").css("color","green")),$(".card-container__item--lth .value-box-percent--hour").text(e+"$"),$(".card-container__item--lth .value-box-percent--day").text(i+"$"),$(".card-container__item--lth .value-box-percent--week").text(n+"$"),$(".card-container__item--lth .value-box-percent--month").text(s+"$"),$(".card-container__item--lth .value-box-many--hour").text(r+"%"),$(".card-container__item--lth .value-box-many--day").text(o+"%"),$(".card-container__item--lth .value-box-many--week").text(a+"%"),$(".card-container__item--lth .value-box-many--month").text(c+"%")}),$.get(e,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--btc .value-box-percent--hour").css("color","red"),$(".card-container__item--btc .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--day").css("color","red"),$(".card-container__item--btc .value-box-many--day").css("color","red")):t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--week").css("color","red"),$(".card-container__item--btc .value-box-many--week").css("color","red")):t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--month").css("color","red"),$(".card-container__item--btc .value-box-many--month").css("color","red")):($(".card-container__item--btc .value-box-percent").css("color","green"),$(".card-container__item--btc .value-box-many").css("color","green")),$(".card-container__item--btc .value-box-percent--hour").text(e+"$"),$(".card-container__item--btc .value-box-percent--day").text(i+"$"),$(".card-container__item--btc .value-box-percent--week").text(n+"$"),$(".card-container__item--btc .value-box-percent--month").text(s+"$"),$(".card-container__item--btc .value-box-many--hour").text(r+"%"),$(".card-container__item--btc .value-box-many--day").text(o+"%"),$(".card-container__item--btc .value-box-many--week").text(a+"%"),$(".card-container__item--btc .value-box-many--month").text(c+"%")}),$(".custom-option").click(function(){var t=$(this).attr("data-value");if(console.log(t),"USD"==t){var e="https://apiv2.bitcoinaverage.com/indices/global/ticker/BTC"+t,i="https://apiv2.bitcoinaverage.com/indices/global/ticker/ETH"+t,n="https://apiv2.bitcoinaverage.com/indices/global/ticker/LTC"+t;$.get(i,function(t){var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--eth .value-box-percent--hour").css("color","red"),$(".card-container__item--eth .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--eth .value-box-percent--day").css("color","red"),$(".card-container__item--eth .value-box-many--day").css("color","red")):t.changes.price.week<0?($(".card-container__item--eth .value-box-percent--week").css("color","red"),$(".card-container__item--eth .value-box-many--week").css("color","red")):t.changes.price.month<0?($(".card-container__item--eth .value-box-percent--month").css("color","red"),$(".card-container__item--eth .value-box-many--month").css("color","red")):($(".card-container__item--eth .value-box-percent").css("color","green"),$(".card-container__item--eth .value-box-many").css("color","green")),$(".card-container__item--eth .value-box-percent--hour").text(e+"$"),$(".card-container__item--eth .value-box-percent--day").text(i+"$"),$(".card-container__item--eth .value-box-percent--week").text(n+"$"),$(".card-container__item--eth .value-box-percent--month").text(s+"$"),$(".card-container__item--eth .value-box-many--hour").text(r+"%"),$(".card-container__item--eth .value-box-many--day").text(o+"%"),$(".card-container__item--eth .value-box-many--week").text(a+"%"),$(".card-container__item--eth .value-box-many--month").text(c+"%")}),$.get(n,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--lth .value-box-percent--hour").css("color","red"),$(".card-container__item--lth .value-box-many--hour").css("color","red")),t.changes.price.day<0&&($(".card-container__item--lth .value-box-percent--day").css("color","red"),$(".card-container__item--lth .value-box-many--day").css("color","red")),t.changes.price.week<0&&($(".card-container__item--lth .value-box-percent--week").css("color","red"),$(".card-container__item--lth .value-box-many--week").css("color","red")),t.changes.price.month<0?($(".card-container__item--lth .value-box-percent--month").css("color","red"),$(".card-container__item--lth .value-box-many--month").css("color","red")):($(".card-container__item--lth .value-box-percent").css("color","green"),$(".card-container__item--lth .value-box-many").css("color","green")),$(".card-container__item--lth .value-box-percent--hour").text(e+"$"),$(".card-container__item--lth .value-box-percent--day").text(i+"$"),$(".card-container__item--lth .value-box-percent--week").text(n+"$"),$(".card-container__item--lth .value-box-percent--month").text(s+"$"),$(".card-container__item--lth .value-box-many--hour").text(r+"%"),$(".card-container__item--lth .value-box-many--day").text(o+"%"),$(".card-container__item--lth .value-box-many--week").text(a+"%"),$(".card-container__item--lth .value-box-many--month").text(c+"%")}),$.get(e,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--btc .value-box-percent--hour").css("color","red"),$(".card-container__item--btc .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--day").css("color","red"),$(".card-container__item--btc .value-box-many--day").css("color","red")):t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--week").css("color","red"),$(".card-container__item--btc .value-box-many--week").css("color","red")):t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--month").css("color","red"),$(".card-container__item--btc .value-box-many--month").css("color","red")):($(".card-container__item--btc .value-box-percent").css("color","green"),$(".card-container__item--btc .value-box-many").css("color","green")),$(".card-container__item--btc .value-box-percent--hour").text(e+"$"),$(".card-container__item--btc .value-box-percent--day").text(i+"$"),$(".card-container__item--btc .value-box-percent--week").text(n+"$"),$(".card-container__item--btc .value-box-percent--month").text(s+"$"),$(".card-container__item--btc .value-box-many--hour").text(r+"%"),$(".card-container__item--btc .value-box-many--day").text(o+"%"),$(".card-container__item--btc .value-box-many--week").text(a+"%"),$(".card-container__item--btc .value-box-many--month").text(c+"%")})}else if("EUR"==t){console.log("click2");var s="https://apiv2.bitcoinaverage.com/indices/global/ticker/BTC"+t,r="https://apiv2.bitcoinaverage.com/indices/global/ticker/ETH"+t,o="https://apiv2.bitcoinaverage.com/indices/global/ticker/LTC"+t;$.get(s,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--btc .value-box-percent--hour").css("color","red"),$(".card-container__item--btc .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--day").css("color","red"),$(".card-container__item--btc .value-box-many--day").css("color","red")):t.changes.price.week<0?($(".card-container__item--btc .value-box-percent--week").css("color","red"),$(".card-container__item--btc .value-box-many--week").css("color","red")):t.changes.price.month<0?($(".card-container__item--btc .value-box-percent--month").css("color","red"),$(".card-container__item--btc .value-box-many--month").css("color","red")):($(".card-container__item--btc .value-box-percent").css("color","green"),$(".card-container__item--btc .value-box-many").css("color","green")),$(".card-container__item--btc .value-box-percent--hour").text(e+"EUR"),$(".card-container__item--btc .value-box-percent--day").text(i+"EUR"),$(".card-container__item--btc .value-box-percent--week").text(n+"EUR"),$(".card-container__item--btc .value-box-percent--month").text(s+"EUR"),$(".card-container__item--btc .value-box-many--hour").text(r+"%"),$(".card-container__item--btc .value-box-many--day").text(o+"%"),$(".card-container__item--btc .value-box-many--week").text(a+"%"),$(".card-container__item--btc .value-box-many--month").text(c+"%")}),$.get(o,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--lth .value-box-percent--hour").css("color","red"),$(".card-container__item--lth .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--lth .value-box-percent--day").css("color","red"),$(".card-container__item--lth .value-box-many--day").css("color","red")):t.changes.price.week<0?($(".card-container__item--lth .value-box-percent--week").css("color","red"),$(".card-container__item--lth .value-box-many--week").css("color","red")):t.changes.price.month<0?($(".card-container__item--lth .value-box-percent--month").css("color","red"),$(".card-container__item--lth .value-box-many--month").css("color","red")):($(".card-container__item--lth .value-box-percent").css("color","green"),$(".card-container__item--lth .value-box-many").css("color","green")),$(".card-container__item--lth .value-box-percent--hour").text(e+"EUR"),$(".card-container__item--lth .value-box-percent--day").text(i+"EUR"),$(".card-container__item--lth .value-box-percent--week").text(n+"EUR"),$(".card-container__item--lth .value-box-percent--month").text(s+"EUR"),$(".card-container__item--lth .value-box-many--hour").text(r+"%"),$(".card-container__item--lth .value-box-many--day").text(o+"%"),$(".card-container__item--lth .value-box-many--week").text(a+"%"),$(".card-container__item--lth .value-box-many--month").text(c+"%")}),$.get(r,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--eth .value-box-percent--hour").css("color","red"),$(".card-container__item--eth .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--eth .value-box-percent--day").css("color","red"),$(".card-container__item--eth .value-box-many--day").css("color","red")):t.changes.price.week<0?($(".card-container__item--eth .value-box-percent--week").css("color","red"),$(".card-container__item--eth .value-box-many--week").css("color","red")):t.changes.price.month<0?($(".card-container__item--eth .value-box-percent--month").css("color","red"),$(".card-container__item--eth .value-box-many--month").css("color","red")):($(".card-container__item--eth .value-box-percent").css("color","green"),$(".card-container__item--eth .value-box-many").css("color","green")),$(".card-container__item--eth .value-box-percent--hour").text(e+"EUR"),$(".card-container__item--eth .value-box-percent--day").text(i+"EUR"),$(".card-container__item--eth .value-box-percent--week").text(n+"EUR"),$(".card-container__item--eth .value-box-percent--month").text(s+"EUR"),$(".card-container__item--eth .value-box-many--hour").text(r+"%"),$(".card-container__item--eth .value-box-many--day").text(o+"%"),$(".card-container__item--eth .value-box-many--week").text(a+"%"),$(".card-container__item--eth .value-box-many--month").text(c+"%")})}else if("RUB"==t){console.log("click3");var a="https://apiv2.bitcoinaverage.com/indices/global/ticker/BTC"+t,c="https://apiv2.bitcoinaverage.com/indices/global/ticker/ETH"+t,h="https://apiv2.bitcoinaverage.com/indices/global/ticker/LTC"+t;$.get(a,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--btc .value-box-percent--hour").css("color","red"),$(".card-container__item--btc .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--day").css("color","red"),$(".card-container__item--btc .value-box-many--day").css("color","red")):t.changes.price.week<0?($(".card-container__item--btc .value-box-percent--week").css("color","red"),$(".card-container__item--btc .value-box-many--week").css("color","red")):t.changes.price.month<0?($(".card-container__item--btc .value-box-percent--month").css("color","red"),$(".card-container__item--btc .value-box-percent--many").css("color","red")):($(".card-container__item--btc .value-box-percent").css("color","green"),$(".card-container__item--btc .value-box-many").css("color","green")),$(".card-container__item--btc .value-box-percent--hour").text(e+"RUB"),$(".card-container__item--btc .value-box-percent--day").text(i+"RUB"),$(".card-container__item--btc .value-box-percent--week").text(n+"RUB"),$(".card-container__item--btc .value-box-percent--month").text(s+"RUB"),$(".card-container__item--btc .value-box-many--hour").text(r+"%"),$(".card-container__item--btc .value-box-many--day").text(o+"%"),$(".card-container__item--btc .value-box-many--week").text(a+"%"),$(".card-container__item--btc .value-box-many--month").text(c+"%")}),$.get(h,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);$(".card-container__item--lth .value-box-percent--hour").text(e+"RUB"),$(".card-container__item--lth .value-box-percent--day").text(i+"RUB"),$(".card-container__item--lth .value-box-percent--week").text(n+"RUB"),$(".card-container__item--lth .value-box-percent--month").text(s+"RUB"),$(".card-container__item--lth .value-box-many--hour").text(r+"%"),$(".card-container__item--lth .value-box-many--day").text(o+"%"),$(".card-container__item--lth .value-box-many--week").text(a+"%"),$(".card-container__item--lth .value-box-many--month").text(c+"%")}),$.get(c,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);$(".card-container__item--eth .value-box-percent--hour").text(e+"RUB"),$(".card-container__item--eth .value-box-percent--day").text(i+"RUB"),$(".card-container__item--eth .value-box-percent--week").text(n+"RUB"),$(".card-container__item--eth .value-box-percent--month").text(s+"RUB"),$(".card-container__item--eth .value-box-many--hour").text(r+"%"),$(".card-container__item--eth .value-box-many--day").text(o+"%"),$(".card-container__item--eth .value-box-many--week").text(a+"%"),$(".card-container__item--eth .value-box-many--month").text(c+"%")})}else if("GBP"==t){var l="https://apiv2.bitcoinaverage.com/indices/global/ticker/BTC"+t,d="https://apiv2.bitcoinaverage.com/indices/global/ticker/BTC"+t,p="https://apiv2.bitcoinaverage.com/indices/global/ticker/LTC"+t;$.get(l,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);t.changes.price.hour<0&&($(".card-container__item--btc .value-box-percent--hour").css("color","red"),$(".card-container__item--btc .value-box-many--hour").css("color","red")),t.changes.price.day<0?($(".card-container__item--btc .value-box-percent--day").css("color","red"),$(".card-container__item--btc .value-box-many--day").css("color","red")):t.changes.price.week<0?($(".card-container__item--btc .value-box-percent--week").css("color","red"),$(".card-container__item--btc .value-box-many--week").css("color","red")):t.changes.price.month<0?($(".card-container__item--btc .value-box-percent--month").css("color","red"),$(".card-container__item--btc .value-box-many--month").css("color","red")):($(".card-container__item--btc .value-box-percent").css("color","green"),$(".card-container__item--btc .value-box-many").css("color","green")),$(".card-container__item--btc .value-box-percent--hour").text(e+"GBP"),$(".card-container__item--btc .value-box-percent--day").text(i+"GBP"),$(".card-container__item--btc .value-box-percent--week").text(n+"GBP"),$(".card-container__item--btc .value-box-percent--month").text(s+"GBP"),$(".card-container__item--btc .value-box-many--hour").text(r+"%"),$(".card-container__item--btc .value-box-many--day").text(o+"%"),$(".card-container__item--btc .value-box-many--week").text(a+"%"),$(".card-container__item--btc .value-box-many--month").text(c+"%")}),$.get(p,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);$(".card-container__item--lth .value-box-percent--hour").text(e+"GBP"),$(".card-container__item--lth .value-box-percent--day").text(i+"GBP"),$(".card-container__item--lth .value-box-percent--week").text(n+"GBP"),$(".card-container__item--lth .value-box-percent--month").text(s+"GBP"),$(".card-container__item--lth .value-box-many--hour").text(r+"%"),$(".card-container__item--lth .value-box-many--day").text(o+"%"),$(".card-container__item--lth .value-box-many--week").text(a+"%"),$(".card-container__item--lth .value-box-many--month").text(c+"%")}),$.get(d,function(t){console.log(t);var e=JSON.stringify(t.changes.price.hour),i=JSON.stringify(t.changes.price.day),n=JSON.stringify(t.changes.price.week),s=JSON.stringify(t.changes.price.month),r=JSON.stringify(t.changes.percent.hour),o=JSON.stringify(t.changes.percent.day),a=JSON.stringify(t.changes.percent.week),c=JSON.stringify(t.changes.percent.month);$(".card-container__item--eth .value-box-percent--hour").text(e+"GBP"),$(".card-container__item--eth .value-box-percent--day").text(i+"GBP"),$(".card-container__item--eth .value-box-percent--week").text(n+"GBP"),$(".card-container__item--eth .value-box-percent--month").text(s+"GBP"),$(".card-container__item--eth .value-box-many--hour").text(r+"%"),$(".card-container__item--eth .value-box-many--day").text(o+"%"),$(".card-container__item--eth .value-box-many--week").text(a+"%"),$(".card-container__item--eth .value-box-many--month").text(c+"%")})}})}),$(".custom-select").each(function(){var t=$(this).attr("class"),e=($(this).attr("id"),$(this).attr("name"),'<div class="'+t+'">');e+='<span class="custom-select-trigger">'+$(this).attr("placeholder")+"</span>",e+='<div class="custom-options">',$(this).find("option").each(function(){e+='<span class="custom-option '+$(this).attr("class")+'" data-value="'+$(this).attr("value")+'">'+$(this).html()+"</span>"}),e+="</div></div>",$(this).wrap('<div class="custom-select-wrapper"></div>'),$(this).hide(),$(this).after(e)}),$(".custom-option:first-of-type").hover(function(){$(this).parents(".custom-options").addClass("option-hover")},function(){$(this).parents(".custom-options").removeClass("option-hover")}),$(".custom-select-trigger").on("click",function(){$("html").one("click",function(){$(".custom-select").removeClass("opened")}),$(this).parents(".custom-select").toggleClass("opened"),event.stopPropagation()}),$(".custom-option").on("click",function(){$(this).parents(".custom-select-wrapper").find("select").val($(this).data("value")),$(this).parents(".custom-options").find(".custom-option").removeClass("selection"),$(this).addClass("selection"),$(this).parents(".custom-select").removeClass("opened"),$(this).parents(".custom-select").find(".custom-select-trigger").text($(this).text())}),$(document).ready(function(){var t=$(".card-container").find($(":checkbox"));$(t).prop("checked",!1),console.log("find"),$(".checkbox-slide").click(function(){console.log("click"),$(this).is(":checked")?($(this).closest("div").addClass("active"),$(this).closest(".card-container__item").find(".value-box-percent--hour").hide(),$(this).closest(".card-container__item").find(".value-box-many--hour").show(),$(this).closest(".card-container__item").find(".value-box-percent--day").hide(),$(this).closest(".card-container__item").find(".value-box-many--day").show(),$(this).closest(".card-container__item").find(".value-box-percent--week").hide(),$(this).closest(".card-container__item").find(".value-box-many--week").show(),$(this).closest(".card-container__item").find(".value-box-percent--month").hide(),$(this).closest(".card-container__item").find(".value-box-many--month").show(),console.log("active")):($(this).closest("div").removeClass("active"),$(this).closest(".card-container__item").find(".value-box-percent--hour").show(),$(this).closest(".card-container__item").find(".value-box-many--hour").hide(),$(this).closest(".card-container__item").find(".value-box-percent--day").show(),$(this).closest(".card-container__item").find(".value-box-many--day").hide(),$(this).closest(".card-container__item").find(".value-box-percent--week").show(),$(this).closest(".card-container__item").find(".value-box-many--week").hide(),$(this).closest(".card-container__item").find(".value-box-percent--month").show(),$(this).closest(".card-container__item").find(".value-box-many--month").hide(),console.log("not-active"))})}),function(t,e,i,n){function s(e,i){this.settings=null,this.options=t.extend({},s.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(s.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(s.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}s.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},s.Width={Default:"default",Inner:"inner",Outer:"outer"},s.Type={Event:"event",State:"state"},s.Plugins={},s.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,n=this.settings.rtl,s={width:"auto","margin-left":n?e:"","margin-right":n?"":e};!i&&this.$stage.children().css(s),t.css=s}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,n=this._items.length,s=!this.settings.autoWidth,r=[];for(t.items={merge:!1,width:e};n--;)i=this._mergers[n],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,r[n]=s?e*i:this._items[n].width();this._widths=r}},{filter:["items","settings"],run:function(){var e=[],i=this._items,n=this.settings,s=Math.max(2*n.items,4),r=2*Math.ceil(i.length/2),o=n.loop&&i.length?n.rewind?s:Math.max(s,r):0,a="",c="";for(o/=2;o--;)e.push(this.normalize(e.length/2,!0)),a+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),c=i[e[e.length-1]][0].outerHTML+c;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(c).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,n=0,s=0,r=[];++i<e;)n=r[i-1]||0,s=this._widths[this.relative(i)]+this.settings.margin,r.push(n+s*t);this._coordinates=r}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,n=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],n.eq(e).css(t.css);else i&&(t.css.width=t.items.width,n.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,n,s=this.settings.rtl?1:-1,r=2*this.settings.stagePadding,o=this.coordinates(this.current())+r,a=o+this.width()*s,c=[];for(i=0,n=this._coordinates.length;i<n;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+r*s,(this.op(t,"<=",o)&&this.op(t,">",a)||this.op(e,"<",o)&&this.op(e,">",a))&&c.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+c.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],s.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,i,n;e=this.$element.find("img"),i=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:void 0,n=this.$element.children(i).width(),e.length&&n<=0&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},s.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,n=-1,s=null;i?(t.each(i,function(t){t<=e&&t>n&&(n=Number(t))}),"function"==typeof(s=t.extend({},this.options,i[n])).stagePadding&&(s.stagePadding=s.stagePadding()),delete s.responsive,s.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+n))):s=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:s}}),this._breakpoint=n,this.settings=s,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},s.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},s.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},s.prototype.update=function(){for(var e=0,i=this._pipe.length,n=t.proxy(function(t){return this[t]},this._invalidated),s={};e<i;)(this._invalidated.all||t.grep(this._pipe[e].filter,n).length>0)&&this._pipe[e].run(s),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},s.prototype.width=function(t){switch(t=t||s.Width.Default){case s.Width.Inner:case s.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},s.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},s.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},s.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},s.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},s.prototype.onDragStart=function(e){var n=null;3!==e.which&&(t.support.transform?n={x:(n=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===n.length?12:4],y:n[16===n.length?13:5]}:(n=this.$stage.position(),n={x:this.settings.rtl?n.left+this.$stage.width()-this.width()+this.settings.margin:n.left,y:n.top}),this.is("animating")&&(t.support.transform?this.animate(n.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=n,this._drag.stage.current=n,this._drag.pointer=this.pointer(e),t(i).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(i).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var n=this.difference(this._drag.pointer,this.pointer(e));t(i).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(n.x)<Math.abs(n.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},s.prototype.onDragMove=function(t){var e=null,i=null,n=null,s=this.difference(this._drag.pointer,this.pointer(t)),r=this.difference(this._drag.stage.start,s);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,r.x=((r.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),n=this.settings.pullDrag?-1*s.x/5:0,r.x=Math.max(Math.min(r.x,e+n),i+n)),this._drag.stage.current=r,this.animate(r.x))},s.prototype.onDragEnd=function(e){var n=this.difference(this._drag.pointer,this.pointer(e)),s=this._drag.stage.current,r=n.x>0^this.settings.rtl?"left":"right";t(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==n.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(s.x,0!==n.x?r:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=r,(Math.abs(n.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},s.prototype.closest=function(e,i){var n=-1,s=this.width(),r=this.coordinates();return this.settings.freeDrag||t.each(r,t.proxy(function(t,o){return"left"===i&&e>o-30&&e<o+30?n=t:"right"===i&&e>o-s-30&&e<o-s+30?n=t+1:this.op(e,"<",o)&&this.op(e,">",r[t+1]||o-s)&&(n="left"===i?t+1:t),-1===n},this)),this.settings.loop||(this.op(e,">",r[this.minimum()])?n=e=this.minimum():this.op(e,"<",r[this.maximum()])&&(n=e=this.maximum())),n},s.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},s.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},s.prototype.current=function(t){if(void 0===t)return this._current;if(0!==this._items.length){if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});void 0!==e.data&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current}},s.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},s.prototype.reset=function(t){void 0!==(t=this.normalize(t))&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},s.prototype.normalize=function(t,e){var i=this._items.length,n=e?0:this._clones.length;return!this.isNumeric(t)||i<1?t=void 0:(t<0||t>=i+n)&&(t=((t-n/2)%i+i)%i+n/2),t},s.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},s.prototype.maximum=function(t){var e,i,n,s=this.settings,r=this._coordinates.length;if(s.loop)r=this._clones.length/2+this._items.length-1;else if(s.autoWidth||s.merge){for(e=this._items.length,i=this._items[--e].width(),n=this.$element.width();e--&&!((i+=this._items[e].width()+this.settings.margin)>n););r=e+1}else r=s.center?this._items.length-1:this._items.length-s.items;return t&&(r-=this._clones.length/2),Math.max(r,0)},s.prototype.minimum=function(t){return t?0:this._clones.length/2},s.prototype.items=function(t){return void 0===t?this._items.slice():(t=this.normalize(t,!0),this._items[t])},s.prototype.mergers=function(t){return void 0===t?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},s.prototype.clones=function(e){var i=this._clones.length/2,n=i+this._items.length,s=function(t){return t%2==0?n+t/2:i-(t+1)/2};return void 0===e?t.map(this._clones,function(t,e){return s(e)}):t.map(this._clones,function(t,i){return t===e?s(i):null})},s.prototype.speed=function(t){return void 0!==t&&(this._speed=t),this._speed},s.prototype.coordinates=function(e){var i,n=1,s=e-1;return void 0===e?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(n=-1,s=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[s]||0))/2*n):i=this._coordinates[s]||0,i=Math.ceil(i))},s.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},s.prototype.to=function(t,e){var i=this.current(),n=null,s=t-this.relative(i),r=(s>0)-(s<0),o=this._items.length,a=this.minimum(),c=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(s)>o/2&&(s+=-1*r*o),(n=(((t=i+s)-a)%o+o)%o+a)!==t&&n-s<=c&&n-s>0&&(i=n-s,t=n,this.reset(i))):t=this.settings.rewind?(t%(c+=1)+c)%c:Math.max(a,Math.min(c,t)),this.speed(this.duration(i,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},s.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},s.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},s.prototype.onTransitionEnd=function(t){if(void 0!==t&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},s.prototype.viewport=function(){var n;return this.options.responsiveBaseElement!==e?n=t(this.options.responsiveBaseElement).width():e.innerWidth?n=e.innerWidth:i.documentElement&&i.documentElement.clientWidth?n=i.documentElement.clientWidth:console.warn("Can not detect viewport width."),n},s.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},s.prototype.add=function(e,i){var n=this.relative(this._current);i=void 0===i?this._items.length:this.normalize(i,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:i}),e=this.prepare(e),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[i-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(e),this._items.splice(i,0,e),this._mergers.splice(i,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[n]&&this.reset(this._items[n].index()),this.invalidate("items"),this.trigger("added",{content:e,position:i})},s.prototype.remove=function(t){void 0!==(t=this.normalize(t,!0))&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},s.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},s.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(i).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var n in this._plugins)this._plugins[n].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},s.prototype.op=function(t,e,i){var n=this.settings.rtl;switch(e){case"<":return n?t>i:t<i;case">":return n?t<i:t>i;case">=":return n?t<=i:t>=i;case"<=":return n?t>=i:t<=i}},s.prototype.on=function(t,e,i,n){t.addEventListener?t.addEventListener(e,i,n):t.attachEvent&&t.attachEvent("on"+e,i)},s.prototype.off=function(t,e,i,n){t.removeEventListener?t.removeEventListener(e,i,n):t.detachEvent&&t.detachEvent("on"+e,i)},s.prototype.trigger=function(e,i,n,r,o){var a={item:{count:this._items.length,index:this.current()}},c=t.camelCase(t.grep(["on",e,n],function(t){return t}).join("-").toLowerCase()),h=t.Event([e,"owl",n||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(h)}),this.register({type:s.Type.Event,name:e}),this.$element.trigger(h),this.settings&&"function"==typeof this.settings[c]&&this.settings[c].call(this,h)),h},s.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){void 0===this._states.current[e]&&(this._states.current[e]=0),this._states.current[e]++},this))},s.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},s.prototype.register=function(e){if(e.type===s.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===s.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,n){return t.inArray(i,this._states.tags[e.name])===n},this)))},s.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},s.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},s.prototype.pointer=function(t){var i={x:null,y:null};return t=t.originalEvent||t||e.event,(t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(i.x=t.pageX,i.y=t.pageY):(i.x=t.clientX,i.y=t.clientY),i},s.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},s.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var n=t(this),r=n.data("owl.carousel");r||(r=new s(this,"object"==typeof e&&e),n.data("owl.carousel",r),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){r.register({type:s.Type.Event,name:i}),r.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),r[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},r))})),"string"==typeof e&&"_"!==e.charAt(0)&&r[e].apply(r,i)})},t.fn.owlCarousel.Constructor=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var s=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers)};s.Defaults={autoRefresh:!0,autoRefreshInterval:500},s.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},s.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},s.prototype.destroy=function(){var t,i;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var s=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var i=this._core.settings,n=i.center&&Math.ceil(i.items/2)||i.items,s=i.center&&-1*n||0,r=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+s,o=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);s++<n;)this.load(o/2+this._core.relative(r)),o&&t.each(this._core.clones(this._core.relative(r)),a),r++},this)},this._core.options=t.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers)};s.Defaults={lazyLoad:!1},s.prototype.load=function(i){var n=this._core.$stage.children().eq(i),s=n&&n.find(".owl-lazy");!s||t.inArray(n.get(0),this._loaded)>-1||(s.each(t.proxy(function(i,n){var s,r=t(n),o=e.devicePixelRatio>1&&r.attr("data-src-retina")||r.attr("data-src");this._core.trigger("load",{element:r,url:o},"lazy"),r.is("img")?r.one("load.owl.lazy",t.proxy(function(){r.css("opacity",1),this._core.trigger("loaded",{element:r,url:o},"lazy")},this)).attr("src",o):((s=new Image).onload=t.proxy(function(){r.css({"background-image":'url("'+o+'")',opacity:"1"}),this._core.trigger("loaded",{element:r,url:o},"lazy")},this),s.src=o)},this)),this._loaded.push(n.get(0)))},s.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var s=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers)};s.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},s.prototype.update=function(){var e=this._core._current,i=e+this._core.settings.items,n=this._core.$stage.children().toArray().slice(e,i),s=[],r=0;t.each(n,function(e,i){s.push(t(i).height())}),r=Math.max.apply(null,s),this._core.$stage.parent().height(r).addClass(this._core.settings.autoHeightClass)},s.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var s=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};s.Defaults={video:!1,videoHeight:!1,videoWidth:!1},s.prototype.fetch=function(t,e){var i=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",n=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),s=t.attr("data-width")||this._core.settings.videoWidth,r=t.attr("data-height")||this._core.settings.videoHeight,o=t.attr("href");if(!o)throw new Error("Missing video URL.");if((n=o.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)i="youtube";else if(n[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(n[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}n=n[6],this._videos[o]={type:i,id:n,width:s,height:r},e.attr("data-video",o),this.thumbnail(t,this._videos[o])},s.prototype.thumbnail=function(e,i){var n,s,r,o=i.width&&i.height?'style="width:'+i.width+"px;height:"+i.height+'px;"':"",a=e.find("img"),c="src",h="",l=this._core.settings,d=function(t){s='<div class="owl-video-play-icon"></div>',n=l.lazyLoad?'<div class="owl-video-tn '+h+'" '+c+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(n),e.after(s)};if(e.wrap('<div class="owl-video-wrapper"'+o+"></div>"),this._core.settings.lazyLoad&&(c="data-src",h="owl-lazy"),a.length)return d(a.attr(c)),a.remove(),!1;"youtube"===i.type?(r="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",d(r)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){r=t[0].thumbnail_large,d(r)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){r=t.framegrab_url,d(r)}})},s.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},s.prototype.play=function(e){var i,n=t(e.target).closest("."+this._core.settings.itemClass),s=this._videos[n.attr("data-video")],r=s.width||"100%",o=s.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),"youtube"===s.type?i='<iframe width="'+r+'" height="'+o+'" src="//www.youtube.com/embed/'+s.id+"?autoplay=1&rel=0&v="+s.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===s.type?i='<iframe src="//player.vimeo.com/video/'+s.id+'?autoplay=1" width="'+r+'" height="'+o+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===s.type&&(i='<iframe frameborder="0"height="'+o+'"width="'+r+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+s.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+i+"</div>").insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},s.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},s.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var s=function(e){this.core=e,this.core.options=t.extend({},s.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};s.Defaults={animateOut:!1,animateIn:!1},s.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,i=t.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),s=this.core.$stage.children().eq(this.next),r=this.core.settings.animateIn,o=this.core.settings.animateOut;this.core.current()!==this.previous&&(o&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.one(t.support.animation.end,i).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(o)),r&&s.one(t.support.animation.end,i).addClass("animated owl-animated-in").addClass(r))}},s.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},s.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var s=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},s.Defaults,this._core.options)};s.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},s.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},s.prototype._getNextTimeout=function(n,s){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||i.hidden||this._core.next(s||this._core.settings.autoplaySpeed)},this),n||this._core.settings.autoplayTimeout)},s.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},s.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},s.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},s.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){"use strict";var s=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},s.Defaults,this._core.options),this.$element.on(this._handlers)};s.Defaults={nav:!1,navText:["",""],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},s.prototype.initialize=function(){var e,i=this._core.settings;this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t("<div>").addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var n=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(n,i.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},s.prototype.destroy=function(){var t,e,i,n;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(n in this.overides)this._core[n]=this._overrides[n];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},s.prototype.update=function(){var t,e,i=this._core.clones().length/2,n=i+this._core.items().length,s=this._core.maximum(!0),r=this._core.settings,o=r.center||r.autoWidth||r.dotsData?1:r.dotsEach||r.items;if("page"!==r.slideBy&&(r.slideBy=Math.min(r.slideBy,r.items)),r.dots||"page"==r.slideBy)for(this._pages=[],t=i,e=0,0;t<n;t++){if(e>=o||0===e){if(this._pages.push({start:Math.min(s,t-i),end:t-i+o-1}),Math.min(s,t-i)===s)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},s.prototype.draw=function(){var e,i=this._core.settings,n=this._core.items().length<=i.items,s=this._core.relative(this._core.current()),r=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||n),i.nav&&(this._controls.$previous.toggleClass("disabled",!r&&s<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!r&&s>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||n),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},s.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},s.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},s.prototype.getPosition=function(e){var i,n,s=this._core.settings;return"page"==s.slideBy?(i=t.inArray(this.current(),this._pages),n=this._pages.length,e?++i:--i,i=this._pages[(i%n+n)%n].start):(i=this._core.relative(this._core.current()),n=this._core.items().length,e?i+=s.slideBy:i-=s.slideBy),i},s.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},s.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},s.prototype.to=function(e,i,n){var s;!n&&this._pages.length?(s=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%s+s)%s].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){"use strict";var s=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var n=this._core.items(this._core.relative(this._core.current())),s=t.map(this._hashes,function(t,e){return t===n?e:null}).join();if(!s||e.location.hash.slice(1)===s)return;e.location.hash=s}},this)},this._core.options=t.extend({},s.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),n=this._core.$stage.children(),s=this._hashes[i]&&n.index(this._hashes[i]);void 0!==s&&s!==this._core.current()&&this._core.to(this._core.relative(s),!1,!0)},this))};s.Defaults={URLhashListener:!1},s.prototype.destroy=function(){var i,n;t(e).off("hashchange.owl.navigation");for(i in this._handlers)this._core.$element.off(i,this._handlers[i]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=s}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){function s(e,i){var s=!1,r=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(r+" ")+r).split(" "),function(t,e){if(o[e]!==n)return s=!i||e,!1}),s}function r(t){return s(t,!0)}var o=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),c={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},h={csstransforms:function(){return!!s("transform")},csstransforms3d:function(){return!!s("perspective")},csstransitions:function(){return!!s("transition")},cssanimations:function(){return!!s("animation")}};h.csstransitions()&&(t.support.transition=new String(r("transition")),t.support.transition.end=c.transition.end[t.support.transition]),h.cssanimations()&&(t.support.animation=new String(r("animation")),t.support.animation.end=c.animation.end[t.support.animation]),h.csstransforms()&&(t.support.transform=new String(r("transform")),t.support.transform3d=h.csstransforms3d())}(window.Zepto||window.jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
